// Code generated by mdatagen. DO NOT EDIT.

package {{ .Package }}

import (
	"time"

	"go.opentelemetry.io/collector/model/pdata"
	{{- if .SemConvVersion }}
	conventions "go.opentelemetry.io/collector/model/semconv/v{{ .SemConvVersion }}"
	{{- end }}
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for {{ .Name }} metrics.
type MetricsSettings struct {
	{{- range $name, $metric := .Metrics }}
	{{ $name.Render }} MetricSettings `mapstructure:"{{ $name }}"`
	{{- end }}
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		{{- range $name, $metric := .Metrics }}
		{{ $name.Render }}: MetricSettings{
			Enabled: {{ $metric.Enabled }},
		},
		{{- end }}
	}
}

{{ range $name, $metric := .Metrics -}}
type metric{{ $name.Render }} struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills {{ $name }} metric with initial data.
func (m *metric{{ $name.Render }}) init() {
	m.data.SetName("{{ $name }}")
	m.data.SetDescription("{{ $metric.Description }}")
	m.data.SetUnit("{{ $metric.Unit }}")
	m.data.SetDataType(pdata.MetricDataType{{ $metric.Data.Type }})
	{{- if $metric.Data.HasMonotonic }}
	m.data.{{ $metric.Data.Type }}().SetIsMonotonic({{ $metric.Data.Monotonic }})
	{{- end }}
	{{- if $metric.Data.HasAggregated }}
	m.data.{{ $metric.Data.Type }}().SetAggregationTemporality({{ $metric.Data.Aggregated.Type }})
	{{- end }}
	{{- if $metric.Attributes }}
	m.data.{{ $metric.Data.Type }}().DataPoints().EnsureCapacity(m.capacity)
	{{- end }}
}

func (m *metric{{ $name.Render }}) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp
{{- if $metric.Data.HasMetricValueType }}, val {{ $metric.Data.MetricValueType.BasicType }}{{ end }}
{{- range $metric.Attributes -}}, {{ .RenderUnexported }}AttributeValue string {{ end }}) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.{{ $metric.Data.Type }}().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	{{- if $metric.Data.HasMetricValueType }}
	dp.Set{{ $metric.Data.MetricValueType }}Val(val)
	{{- end }}
	{{- range $metric.Attributes }}
	dp.Attributes().Insert(A.{{ .Render }}, pdata.NewValueString({{ .RenderUnexported }}AttributeValue))
	{{- end }}
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metric{{ $name.Render }}) updateCapacity() {
	if m.data.{{ $metric.Data.Type }}().DataPoints().Len() > m.capacity {
		m.capacity = m.data.{{ $metric.Data.Type }}().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metric{{ $name.Render }}) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.{{ $metric.Data.Type }}().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetric{{ $name.Render }}(settings MetricSettings) metric{{ $name.Render }} {
	m := metric{{ $name.Render }}{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

{{ end -}}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                pdata.Timestamp // start time that will be applied to all recorded data points.
	metricsCapacity          int             // maximum observed number of metrics per resource.
	resourceCapacity         int             // maximum observed number of resource attributes.
	metricsBuffer            pdata.Metrics   // accumulates metrics data before emitting.
	{{- range $name, $metric := .Metrics }}
	metric{{ $name.Render }} metric{{ $name.Render }}
	{{- end }}
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pdata.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                pdata.NewTimestampFromTime(time.Now()),
		metricsBuffer:            pdata.NewMetrics(),
		{{- range $name, $metric := .Metrics }}
		metric{{ $name.Render }}: newMetric{{ $name.Render }}(settings.{{ $name.Render }}),
		{{- end }}
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pdata.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceOption applies changes to provided resource.
type ResourceOption func(pdata.Resource)

{{- range $name, $attr := .ResourceAttributes }}
// With{{ $name.Render }} sets provided value as "{{ $name }}" attribute for current resource.
func With{{ $name.Render }}(val {{ $attr.Type.Primitive }}) ResourceOption {
	return func(r pdata.Resource) {
		r.Attributes().Upsert{{ $attr.Type }}("{{ $name }}", val)
	}
}
{{ end }}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead. Resource attributes should be provided as ResourceOption arguments.
func (mb *MetricsBuilder) EmitForResource(ro ...ResourceOption) {
	rm := pdata.NewResourceMetrics()
	{{- if .SemConvVersion }}
	rm.SetSchemaUrl(conventions.SchemaURL)
	{{- end }}
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	for _, op := range ro {
		op(rm.Resource())
	}
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/{{ .Name }}")
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	{{- range $name, $metric := .Metrics }}
	mb.metric{{- $name.Render }}.emit(ils.Metrics())
	{{- end }}
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(ro ...ResourceOption) pdata.Metrics {
	mb.EmitForResource(ro...)
	metrics := pdata.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

{{ range $name, $metric := .Metrics -}}
// Record{{ $name.Render }}DataPoint adds a data point to {{ $name }} metric.
func (mb *MetricsBuilder) Record{{ $name.Render }}DataPoint(ts pdata.Timestamp
	{{- if $metric.Data.HasMetricValueType }}, val {{ $metric.Data.MetricValueType.BasicType }}{{ end }}
	{{- range $metric.Attributes -}} , {{ .RenderUnexported }}AttributeValue string{{ end }}) {
	mb.metric{{ $name.Render }}.recordDataPoint(mb.startTime, ts
		{{- if $metric.Data.HasMetricValueType }}, val {{ end }}
		{{- range $metric.Attributes -}} , {{ .RenderUnexported }}AttributeValue{{ end }})
}
{{ end }}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pdata.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
{{- range $name, $info := .Attributes }}
	// {{ $name.Render }} ({{ $info.Description }})
	{{ $name.Render }} string
{{- end }}
}{
{{- range $name, $info := .Attributes }}
	{{- if $info.Value }}
	"{{ $info.Value }}",
	{{- else }}
	"{{ $name }}",
	{{- end }}
{{- end }}
}

// A is an alias for Attributes.
var A = Attributes

{{ range $name, $info := .Attributes -}}
{{ if $info.Enum -}}
// Attribute{{ $name.Render }} are the possible values that the attribute "{{ $name }}" can have.
var Attribute{{ $name.Render }} = struct {
{{- range $info.Enum }}
	{{ . | publicVar }} string
{{- end }}
}{
{{- range $info.Enum }}
	"{{ . }}",
{{- end }}
}
{{ end }}
{{ end }}
