// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/model/pdata"
	conventions "go.opentelemetry.io/collector/model/semconv/v1.9.0"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for hostmetricsreceiver/processes metrics.
type MetricsSettings struct {
	SystemProcessesCount   MetricSettings `mapstructure:"system.processes.count"`
	SystemProcessesCreated MetricSettings `mapstructure:"system.processes.created"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		SystemProcessesCount: MetricSettings{
			Enabled: true,
		},
		SystemProcessesCreated: MetricSettings{
			Enabled: true,
		},
	}
}

type metricSystemProcessesCount struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.processes.count metric with initial data.
func (m *metricSystemProcessesCount) init() {
	m.data.SetName("system.processes.count")
	m.data.SetDescription("Total number of processes in each state.")
	m.data.SetUnit("{processes}")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemProcessesCount) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64, statusAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Status, pdata.NewValueString(statusAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemProcessesCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemProcessesCount) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemProcessesCount(settings MetricSettings) metricSystemProcessesCount {
	m := metricSystemProcessesCount{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricSystemProcessesCreated struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.processes.created metric with initial data.
func (m *metricSystemProcessesCreated) init() {
	m.data.SetName("system.processes.created")
	m.data.SetDescription("Total number of created processes.")
	m.data.SetUnit("{processes}")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
}

func (m *metricSystemProcessesCreated) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemProcessesCreated) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemProcessesCreated) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemProcessesCreated(settings MetricSettings) metricSystemProcessesCreated {
	m := metricSystemProcessesCreated{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                    pdata.Timestamp // start time that will be applied to all recorded data points.
	metricsCapacity              int             // maximum observed number of metrics per resource.
	resourceCapacity             int             // maximum observed number of resource attributes.
	metricsBuffer                pdata.Metrics   // accumulates metrics data before emitting.
	metricSystemProcessesCount   metricSystemProcessesCount
	metricSystemProcessesCreated metricSystemProcessesCreated
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pdata.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                    pdata.NewTimestampFromTime(time.Now()),
		metricsBuffer:                pdata.NewMetrics(),
		metricSystemProcessesCount:   newMetricSystemProcessesCount(settings.SystemProcessesCount),
		metricSystemProcessesCreated: newMetricSystemProcessesCreated(settings.SystemProcessesCreated),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pdata.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceOption applies changes to provided resource.
type ResourceOption func(pdata.Resource)

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead. Resource attributes should be provided as ResourceOption arguments.
func (mb *MetricsBuilder) EmitForResource(ro ...ResourceOption) {
	rm := pdata.NewResourceMetrics()
	rm.SetSchemaUrl(conventions.SchemaURL)
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	for _, op := range ro {
		op(rm.Resource())
	}
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/hostmetricsreceiver/processes")
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricSystemProcessesCount.emit(ils.Metrics())
	mb.metricSystemProcessesCreated.emit(ils.Metrics())
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(ro ...ResourceOption) pdata.Metrics {
	mb.EmitForResource(ro...)
	metrics := pdata.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

// RecordSystemProcessesCountDataPoint adds a data point to system.processes.count metric.
func (mb *MetricsBuilder) RecordSystemProcessesCountDataPoint(ts pdata.Timestamp, val int64, statusAttributeValue string) {
	mb.metricSystemProcessesCount.recordDataPoint(mb.startTime, ts, val, statusAttributeValue)
}

// RecordSystemProcessesCreatedDataPoint adds a data point to system.processes.created metric.
func (mb *MetricsBuilder) RecordSystemProcessesCreatedDataPoint(ts pdata.Timestamp, val int64) {
	mb.metricSystemProcessesCreated.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pdata.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// Status (Breakdown status of the processes.)
	Status string
}{
	"status",
}

// A is an alias for Attributes.
var A = Attributes

// AttributeStatus are the possible values that the attribute "status" can have.
var AttributeStatus = struct {
	Blocked  string
	Daemon   string
	Detached string
	Idle     string
	Locked   string
	Orphan   string
	Paging   string
	Running  string
	Sleeping string
	Stopped  string
	System   string
	Unknown  string
	Zombies  string
}{
	"blocked",
	"daemon",
	"detached",
	"idle",
	"locked",
	"orphan",
	"paging",
	"running",
	"sleeping",
	"stopped",
	"system",
	"unknown",
	"zombies",
}
